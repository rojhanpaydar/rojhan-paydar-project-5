{"version":3,"sources":["Image.js","App.js","serviceWorker.js","index.js"],"names":["Image","image","src","featured_image","alt","name","App","getRestaurants","event","preventDefault","axios","url","method","responseType","headers","params","count","then","restaurants","data","newState","key","push","restaurant","setState","randomRestaurants","Math","floor","random","length","state","className","id","role","aria-label","onClick","this","cuisines","location","address","locality","timings","href","menu_url","average_cost_for_two","phone_numbers","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kUAUeA,MARf,YAA2B,IAAVC,EAAS,EAATA,MACf,OACE,6BACE,yBAAKC,IAAKD,EAAME,eAAgBC,IAAKH,EAAMI,SCsFlCC,E,kDArFb,aAAe,IAAD,8BACZ,gBAMFC,eAAiB,SAACC,GAChBA,EAAMC,iBACNC,IAAM,CACJC,IACE,8EACFC,OAAQ,MACRC,aAAc,OACdC,QAAS,CACP,WAAY,oCAEdC,OAAQ,CACNC,MAAO,MAERC,MAAK,SAACC,GACPA,EAAcA,EAAYC,KAAKD,YAC/B,IAAME,EAAW,GACjB,IAAK,IAAIC,KAAOH,EACdE,EAASE,KAAKJ,EAAYG,GAAKE,YAEjC,EAAKC,SAAS,CACZN,YAAaE,EACbK,kBACEL,EAASM,KAAKC,MAAMD,KAAKE,SAAWR,EAASS,eA3BnD,EAAKC,MAAQ,CACXL,kBAAmB,MAHT,E,qDAkCZ,OACE,yBAAKM,UAAU,OACb,gCAEA,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,iBACb,wBAAIC,GAAG,SAAP,eACA,gKAGE,0BAAMC,KAAK,MAAMC,aAAW,sBAA5B,gBAHF,yDAKA,4BAAQC,QAASC,KAAK7B,gBAAgB,0BAAM0B,KAAK,MAAMC,aAAW,yBAA5B,iBAAtC,iBAAkH,0BAAMD,KAAK,MAAMC,aAAW,kBAA5B,iBACjHE,KAAKN,MAAML,kBACV,4BACE,2CAAiBW,KAAKN,MAAML,kBAAkBpB,MAC9C,4BACE,kBAAC,EAAD,CAAOJ,MAAOmC,KAAKN,MAAML,qBAE3B,4BACE,wCADF,IACqBW,KAAKN,MAAML,kBAAkBY,UAElD,4BACE,yCADF,IACsBD,KAAKN,MAAML,kBAAkBa,SAASC,SAE5D,4BACE,qCADF,IACkBH,KAAKN,MAAML,kBAAkBa,SAASE,UAExD,4BACE,sCADF,IACmBJ,KAAKN,MAAML,kBAAkBgB,SAEhD,4BACE,sCAAgB,IAChB,uBAAGC,KAAMN,KAAKN,MAAML,kBAAkBkB,UAAU,0BAAMZ,UAAU,cAAhB,uBAElD,4BACE,qDADF,KAEGK,KAAKN,MAAML,kBAAkBmB,sBAEhC,4BACE,6CADF,IACyB,uBAAGb,UAAU,aAAaW,KAAK,OAAOR,aAAW,oBAAoBE,KAAKN,MAAML,kBAAkBoB,iBAG3H,a,GA9EEC,aCOEC,QACW,cAA7BC,OAAOV,SAASW,UAEe,UAA7BD,OAAOV,SAASW,UAEhBD,OAAOV,SAASW,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzC,MAAK,SAAA0C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1692e5d8.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Image({ image }) {\n  return (\n    <div>\n      <img src={image.featured_image} alt={image.name} />\n    </div>\n  );\n}\n\nexport default Image;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport Image from \"./Image\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      randomRestaurants: null,\n    };\n  }\n\n  getRestaurants = (event) => {\n    event.preventDefault();\n    axios({\n      url:\n        \"https://developers.zomato.com/api/v2.1/search?entity_id=89&entity_type=city\",\n      method: \"GET\",\n      responseType: \"JSON\",\n      headers: {\n        \"user-key\": \"6dd0b6c953cd598dfe6caa540847c370\",\n      },\n      params: {\n        count: 20,\n      },\n    }).then((restaurants) => {\n      restaurants = restaurants.data.restaurants;\n      const newState = [];\n      for (let key in restaurants) {\n        newState.push(restaurants[key].restaurant);\n      }\n      this.setState({\n        restaurants: newState,\n        randomRestaurants:\n          newState[Math.floor(Math.random() * newState.length)],\n      });\n    });\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n\n        <div className=\"wrapper position\">\n          <div className=\"flexContainer\">\n            <h1 id=\"slide\">Foodie&Find</h1>\n            <p>\n              For when you really can't decide on where to eat. We promise we\n              won't give you an \"I don't know, what do you want?\" in response.\n              <span role=\"img\" aria-label=\"winking emoji face\">üòú</span> (*hint: click until you find a restaurant you like!)\n            </p>\n            <button onClick={this.getRestaurants}><span role=\"img\" aria-label=\"emoji of french fries\">üçü </span>TIME FOR FOOD <span role=\"img\" aria-label=\"emoji of sushi\">üç£</span></button>\n            {this.state.randomRestaurants ? (\n              <ul>\n                <li>Restaurant: {this.state.randomRestaurants.name}</li>\n                <li>\n                  <Image image={this.state.randomRestaurants} />\n                </li>\n                <li>\n                  <h2>Cuisine:</h2> {this.state.randomRestaurants.cuisines}\n                </li>\n                <li>\n                  <h2>Location:</h2> {this.state.randomRestaurants.location.address}\n                </li>\n                <li>\n                  <h2>Area:</h2> {this.state.randomRestaurants.location.locality}\n                </li>\n                <li>\n                  <h2>Hours:</h2> {this.state.randomRestaurants.timings}\n                </li>\n                <li>\n                  <h2>Menu: </h2>{\" \"}\n                  <a href={this.state.randomRestaurants.menu_url}><span className=\"linkStyles\">LINK TO MENU HERE</span></a>\n                </li>\n                <li>\n                  <h2>Average Cost For Two:</h2> $\n                  {this.state.randomRestaurants.average_cost_for_two}\n                </li>\n                <li>\n                  <h2>Phone Number:</h2> <a className=\"linkStyles\" href=\"tel:\" aria-label=\"telephone number\">{this.state.randomRestaurants.phone_numbers}</a>\n                </li>\n              </ul>\n            ) : null}\n          </div>\n        </div>\n      </header>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}